---
layout: post
title:  "Continue"
date:   2024-06-03 08:00:00 +0800
categories: AICodingAssistant Continue
tags: [Continue, Ollama, GitHubCopilot]
---

## Continue
- [Continue](https://www.continue.dev)
- [Github Continue](https://github.com/continuedev/continue)
- [Docs](https://continue.dev/docs)
- [Blog](https://blog.continue.dev)

### 介绍

Continue 使您能够在 IDE 中创建自己的 AI 代码助手。使用 [VS Code](https://marketplace.visualstudio.com/items?itemName=Continue.continue) 和 [JetBrains](https://plugins.jetbrains.com/plugin/22707-continue-extension) 插件保持开发者的流畅体验，这些插件可以连接到任何模型、任何上下文以及任何其他你需要的东西。

- 轻松理解代码部分
- Tab 自动完成代码建议
- 重构您正在编码的函数
- 询问代码库相关问题
- 快速使用文档作为上下文
- 使用斜线命令启动操作
- 将类、文件等添加到上下文
- 立即了解终端错误

Continue 使您能够使用适合工作的模型，无论是开源还是商业，本地运行还是远程运行，用于聊天、自动完成或嵌入。它提供了许多配置点，以便您可以自定义扩展以适应您现有的工作流程。

### 开发语言

| 语言 | 占比 |
| --- | ---: |
| TypeScript | 74.0% |
| Kotlin | 11.8% |
| Rust | 4.9% |
| CSS | 3.6% |
| Scheme | 2.5% |
| JavaScript | 2.4% |
| Other | 0.8% |

### 贡献（Contributing）
- [contribution ideas board](https://github.com/orgs/continuedev/projects/2)
- [contributing guide](https://github.com/continuedev/continue/blob/main/CONTRIBUTING.md)
- [contribute on Discord](https://discord.gg/vapESyrFmJ)


## 使用

| 功能 | VS Code 快捷键 (MacOS) | JetBrains 快捷键 (MacOS) | VS Code 快捷键 (Windows) | JetBrains 快捷键 (Windows) |
| --- | --- | --- | --- | --- |
| 轻松理解代码部分     | Cmd+L | Cmd+J | Ctrl+L | Ctrl+J |
| Tab 自动完成代码建议 | Tab   | Tab   | Tab    | Tab    |
| 重构您正在编码的函数  | Cmd+I | Cmd+I | Ctrl+I | Ctrl+I |
| 询问代码库相关问题    | Cmd+Enter | Cmd+Enter | Ctrl+Enter | Ctrl+Enter |
| 快速使用文档作为上下文 | @docs | @docs | @docs | @docs |
| 使用斜线命令启动操作    | /edit | /edit | /edit | /edit |
| 将类、文件等添加到上下文 | @files | @files | @files | @files |
| 立即了解终端错误      | Cmd+Shift+R | - | Ctrl+Shift+R | - |

- [How to use Continue](https://docs.continue.dev/how-to-use-continue)


## 配置

### 配置文件 `~/.continue/config.json`

```json
{
  "tabAutocompleteModel": {
    "title": "Tab Autocomplete",
    "provider": "ollama",
    "model": "codestral:22b",
    "apiKey": ""
  },
  "models": [
    {
      "title": "DeepSeek API",
      "provider": "openai",
      "model": "deepseek-coder",
      "apiBase": "https://api.deepseek.com/v1",
      "apiType": "openai",
      "apiKey": "sk-xxx"
    },
    {
      "title": "Ollama DeepSeek-V2-16B",
      "provider": "ollama",
      "model": "deepseek-v2:16b",
      "contextLength": 4096,
      "apiKey": ""
    },
    {
      "title": "Ollama Codestral-22B",
      "provider": "ollama",
      "model": "codestral:22b",
      "contextLength": 4096,
      "apiKey": ""
    }
  ],
  "slashCommands": [
    {
      "name": "edit",
      "description": "Edit highlighted code",
      "step": "EditHighlightedCodeStep"
    },
    {
      "name": "comment",
      "description": "Write comments for the highlighted code",
      "step": "CommentCodeStep"
    },
    {
      "name": "share",
      "description": "Download and share this session",
      "step": "ShareSessionStep"
    },
    {
      "name": "cmd",
      "description": "Generate a shell command",
      "step": "GenerateShellCommandStep"
    }
  ],
  "customCommands": [
    {
      "name": "test",
      "prompt": "Write a comprehensive set of unit tests for the selected code. It should setup, run tests that check for correctness including important edge cases, and teardown. Ensure that the tests are complete and sophisticated. Give the tests just as chat output, don't edit any file.",
      "description": "Write unit tests for highlighted code"
    }
  ],
  "contextProviders": [
    {
      "name": "diff",
      "params": {}
    },
    {
      "name": "open",
      "params": {}
    },
    {
      "name": "terminal",
      "params": {}
    },
    {
      "name": "code",
      "params": {}
    },
    {
      "name": "docs",
      "params": {}
    }
  ],
  "allowAnonymousTelemetry": true,
  "embeddingsProvider": {
    "provider": "ollama",
    "model": "nomic-embed-text",
    "apiBase": "http://localhost:11434" // optional, defaults to http://localhost:11434
  },
  "reranker": {
    "name": "free-trial"
  }
}
```

- Customization
    - [Context Providers](https://docs.continue.dev/customization/context-providers)
    - [Slash Commands](https://docs.continue.dev/customization/slash-commands)
- Walkthroughs
    - [Running Continue without Internet](https://docs.continue.dev/walkthroughs/running-continue-without-internet)
    - [Codebase retrieval](https://docs.continue.dev/walkthroughs/codebase-embeddings)
    - [Tab Autocomplete](https://docs.continue.dev/walkthroughs/tab-autocomplete)
    - [Prompt files](https://docs.continue.dev/walkthroughs/prompt-files)

### 内网部署

#### Ollama

如果使用 Ollama 作为提供商，可以在配置文件中指定 Ollama 服务器的基本 URL。

```json
{
  "models": [
    {
      "title": "Ollama Codestral-22B",
      "provider": "ollama",
      "model": "codestral:22b",
      "contextLength": 4096,
      "apiBase": "http://localhost:11434",
      "apiKey": ""
    }
  ]
}
```

#### Telemetry

停止 Continue 尝试向 [PostHog](https://github.com/PostHog/posthog) 请求匿名遥测。

```json
{
  "allowAnonymousTelemetry": false
}
```


## 开发
- [Contributing to Continue](https://github.com/continuedev/continue/blob/main/CONTRIBUTING.md)

### VS Code
1. 克隆 Continue 代码 `https://github.com/continuedev/continue`
2. 打开命令面板 `cmd/ctrl+shift+p`，选择 `Tasks: Run Task`，然后选择 `install-all-dependencies`

![](/images/2024/Continue/RunTask.png)

![](/images/2024/Continue/RunTask-install-all-dependencies.png)

3. 启动调试：
   - 切换到运行和调试视图 `cmd/ctrl+shift+d`
  ![](/images/2024/Continue/Show-Run-and-Debug.png)

   - 从下拉菜单中选择 `Extension (VS Code)`
   ![](/images/2024/Continue/Show-Run-and-Debug-Extension(VSCode).png)

   - 点击开始调试按钮
   ![](/images/2024/Continue/Show-Run-and-Debug-F5.png)

   - 这将以调试模式启动扩展，并在安装了扩展的新 VS Code 窗口中打开
      * 具有扩展的新 VS Code 窗口称为 _Host VS Code_
      ![](/images/2024/Continue/Host-VS-Code.png)

      * 启动调试的窗口称为 _Main VS Code_
      ![](/images/2024/Continue/Main-VS-Code.png)

    - 在 _Host VS Code_ 中，打开命令面板 `cmd/ctrl+shift+p`，选择 `Continue: Start Session`，然后选择 `Continue: Start Session`，这将启动 Continue 会话
    ![](/images/2024/Continue/Continue.png)

4. 要打包插件，可以在 `extensions/vscode` 目录中运行 `npm run package`。这将生成 `extensions/vscode/build/continue-{VERSION}.vsix`。

您可以通过在插件视图中选择 `从 VSIX 安装...` 来安装。

![](/images/2024/Continue/Install-From-VSIX.png)

#### 调试

**断点** 可以在调试时在 `core` 和 `extensions/vscode` 文件夹中使用，但目前不支持在 `gui` 代码中使用。

**热重载** 使用 Vite 启用，因此如果对 `gui` 进行任何更改，应该会自动反映出来，无需重新构建。在某些情况下，您可能需要刷新 _Host VS Code_ 窗口才能看到更改。

同样，只需重新加载 _Host VS Code_ 窗口，即可自动包含对 `core` 或 `extensions/vscode` 的任何更改。


## 自定义

### Slash Commands
#### Custom Slash Commands(Use Natural Language)

**当您经常重复使用提示时，自定义命令非常有用。**

编辑配置文件：`~/.continue/config.json`

```json
  "customCommands": [
    {
      "name": "test",
      "prompt": "Write a comprehensive set of unit tests for the selected code. It should setup, run tests that check for correctness including important edge cases, and teardown. Ensure that the tests are complete and sophisticated. Give the tests just as chat output, don't edit any file.",
      "description": "Write unit tests for highlighted code"
    },
    {
      "name": "explain",
      "prompt": "{{{ input }}}\n\n详细解释所选代码。详细说明其功能、用途和工作原理。使用示例来说明您的解释。",
      "description": "解释代码"
    },
    {
      "name": "fix",
      "prompt": "{{{ input }}}\n\n分析并修复代码中的错误。提供详细的解释和解决方案，包括但不限于语法错误、逻辑错误或性能问题。确保您的解决方案是正确的，并且能够解决所有已知的问题。",
      "description": "修复代码"
    },
    {
      "name": "check",
      "prompt": "{{{ input }}}\n\n请阅读突出显示的代码并检查是否有任何错误。您应该查找以下内容并保持高度警惕：\n- 语法错误\n- 逻辑错误\n- 安全漏洞\n- 性能问题\n- 任何其他看似错误的内容\n\n一旦您发现错误，请尽可能清楚地解释，但不要使用多余的词语。例如，不要说“我认为第 5 行有一个语法错误”，而应该说“第 5 行有语法错误”。针对发现的每个错误，给出一个要点作为答案。",
      "description": "检查代码是否存在错误"
    }
  ]
```

- name: 命令的名称，将使用 /name 调用
- description: 命令的简短描述，将出现在下拉列表中
- prompt: 要发送给 LLM 的模板化提示
- {{{ input }}}: 使用斜线命令输入的任何其他输入。例如，如果您键入 /test only write one test，则输入将为 only write one test。这还将包括突出显示的代码块。

#### Custom Slash Commands(Use Function)

这需要使用 config.ts 而不是 config.json。

- [Custom Slash Commands(Use Function)](https://docs.continue.dev/customization/slash-commands#custom-slash-commands-1)
